generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String             @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  image         String?
  emailVerified Boolean
  role          UserRoles          @default(User)
  accounts      Account[]
  trustScore    AuthorTrustMetric?
  images        PostPictures[]
  editorPosts   Posts[]            @relation("Editor")
  authorPosts   Posts[]            @relation("Author")
  sessions      Session[]
  settings      UserSettings?
  likes         PostLike[]
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @db.Uuid
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  User                  User      @relation(fields: [userId], references: [id])
}

model Verification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime
}

model Posts {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?         @db.Uuid
  postTitle       String
  slug            String
  excerpt         String?
  contentHtml     String
  contentJson     Json
  tags            String[]
  published       Boolean         @default(false)
  status          PostStatus      @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  editorId        String?         @db.Uuid
  flags           ContentFlag[]
  decisions       Decision[]
  moderation      ModerationJob[]
  pictures        PostPictures[]
  editor          User?           @relation("Editor", fields: [editorId], references: [id])
  User            User?           @relation("Author", fields: [userId], references: [id])
  reports         Report[]
  review          ReviewTask[]
  currentRevision Revision?       @relation("Current Revision")
  revisions       Revision[]      @relation("Revisions")
  stats           PostStats?
  likes           PostLike[]
  views           PostViewEvent[]
  viewAgg         PostViewAgg[]
  comments        Comment[]
}

model Revision {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId                String        @db.Uuid
  content               String
  summary               String?
  version               Int           @default(1)
  status                PostStatus    @default(DRAFT)
  createdBy             String
  createdAt             DateTime      @default(now())
  currentRevisionPostId String?       @unique @db.Uuid
  contentFlag           ContentFlag[]
  currentRevisionPost   Posts?        @relation("Current Revision", fields: [currentRevisionPostId], references: [id])
  post                  Posts         @relation("Revisions", fields: [postId], references: [id])
}

model ContentFlag {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String     @db.Uuid
  revisionId String?    @db.Uuid
  signal     FlagSignal
  score      Float?
  severity   Severity
  source     FlagSource
  details    Json?
  createdAt  DateTime   @default(now())
  resolvedAt DateTime?
  resolvedBy String?
  post       Posts      @relation(fields: [postId], references: [id])
  revision   Revision?  @relation(fields: [revisionId], references: [id])
}

model Report {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String       @db.Uuid
  reporterId String?
  reason     String
  evidence   String?
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  closedAt   DateTime?
  handledBy  String?
  post       Posts        @relation(fields: [postId], references: [id])
}

model UserSettings {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique @db.Uuid
  User   User   @relation(fields: [userId], references: [id])
}

model PostPictures {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId      String?  @db.Uuid
  userId      String   @db.Uuid
  bucket      String
  key         String
  url         String
  region      String?
  etag        String?
  checksum    String?
  mimeType    String
  sizeBytes   Int?
  width       Int?
  height      Int?
  placeholder String
  alt         String?
  caption     String?
  indexInHtml Int?
  createdAt   DateTime @default(now())
  post        Posts?   @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([postId, placeholder])
  @@index([postId])
}

model ModerationJob {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId         String    @db.Uuid
  postVersion    Int
  idempotencyKey String    @unique
  provider       String    @default("openai")
  providerModel  String
  requestHash    String
  status         JobStatus @default(QUEUED)
  result         Json?
  error          String?
  attempts       Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  post           Posts     @relation(fields: [postId], references: [id])

  @@unique([postId, postVersion])
  @@index([postId, postVersion])
}

model ReviewTask {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId      String     @db.Uuid
  postVersion Int
  assigneeId  String?
  reason      String
  status      TaskStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  post        Posts      @relation(fields: [postId], references: [id])

  @@unique([postId, postVersion])
  @@index([status, createdAt])
}

model Decision {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId      String          @db.Uuid
  postVersion Int
  decidedBy   String
  outcome     DecisionOutcome
  rationale   String?
  data        Json?
  createdAt   DateTime        @default(now())
  post        Posts           @relation(fields: [postId], references: [id])

  @@index([postId, postVersion])
}

model AuthorTrustMetric {
  id              String    @id @default(cuid())
  userId          String    @unique @db.Uuid
  rejectedCount   Int       @default(0)
  reportedCount   Int       @default(0)
  humanFlagCount  Int       @default(0)
  score           Float     @default(0)
  isAdminTrusted  Boolean   @default(false)
  lastEvaluatedAt DateTime?
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model PostStats {
  postId       String @id @db.Uuid
  viewCount    BigInt @default(0)
  likeCount    BigInt @default(0)
  commentCount BigInt @default(0)
  post         Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId, createdAt])
  @@index([postId, createdAt])
}

model PostViewEvent {
  id            String   @id @default(cuid())
  postId        String   @db.Uuid
  userId        String?  @db.Uuid
  anonHash      String?
  ts            DateTime @default(now())
  tVisibleMs    Int?
  scrollPercent Float?
  uaHash        String?
  ipHash        String?
  post          Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, ts])
}

model PostViewAgg {
  id      String   @id @default(cuid())
  postId  String   @db.Uuid
  date    DateTime // start of hour/day
  bucket  String // 'hourly' | 'daily'
  total   Int
  uniques Int
  post    Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, date, bucket])
}

model Comment {
  id        String        @id @default(cuid())
  postId    String        @db.Uuid
  parentId  String?
  userId    String
  body      String        @db.Text
  status    CommentStatus @default(PUBLISHED)
  createdAt DateTime      @default(now())
  editedAt  DateTime?
  deletedAt DateTime?

  // For efficient trees
  rootId String? // id of top-level comment; equals id for roots

  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@index([rootId, createdAt])
}

model AbuseCounter {
  id        String   @id @default(cuid())
  bucket    String   @unique
  count     Int      @default(0)
  expiresAt DateTime
}

model AuditLog {
  id        String   @id @default(cuid())
  subject   String
  action    String
  actorId   String?
  meta      Json?
  createdAt DateTime @default(now())
}

enum CommentStatus {
  PUBLISHED
  HIDDEN
  DELETED
}

enum ReportStatus {
  OPEN
  CLOSED
  DISMISSED
}

enum PostStatus {
  DRAFT
  SUBMITTED
  PENDING_AUTO
  PENDING_HUMAN
  APPROVED
  REJECTED
  PUBLISHED
}

enum FlagSource {
  MODEL
  HUMAN
  REPORT
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FlagSignal {
  TOXICITY
  SLUR
  PII
  NSFW_IMAGE
  LINK_POLICY
  MALWARE_LINK
  OTHER
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCESSFUL
  FAILED
}

enum TaskStatus {
  OPEN
  CLAIMED
  RESOLVED
}

enum DecisionOutcome {
  APPROVE
  REJECT
  ESCALATE
}

enum UserRoles {
  User
  Creator
  Moderator
  Admin
}

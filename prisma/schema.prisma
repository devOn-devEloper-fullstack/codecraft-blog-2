// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String             @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  image         String?
  emailVerified Boolean
  role          UserRoles          @default(User)
  sessions      Session[]
  accounts      Account[]
  settings      UserSettings?
  authorPosts   Posts[]            @relation("Author")
  editorPosts   Posts[]            @relation("Editor")
  images        PostPictures[]
  trustScore    AuthorTrustMetric?
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime
  updatedAt DateTime
}

model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User                  User?     @relation(fields: [userId], references: [id])
  userId                String    @db.Uuid
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime
}

model Posts {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?          @relation("Author", fields: [userId], references: [id])
  userId      String?        @db.Uuid
  postTitle   String // No Rich Text
  slug        String
  excerpt     String?
  contentHtml String
  tags        String[]
  published   Boolean        @default(false)
  status      PostStatus     @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  pictures    PostPictures[]

  editor   User?   @relation("Editor", fields: [editorId], references: [id])
  editorId String? @db.Uuid

  currentRevision Revision?  @relation("Current Revision")
  revisions       Revision[] @relation("Revisions")

  flags      ContentFlag[]
  moderation ModerationJob[]
  review     ReviewTask[]
  decisions  Decision[]
  reports    Report[]
}

model Revision {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId                String        @db.Uuid
  post                  Posts?        @relation("Revisions", fields: [postId], references: [id])
  content               String
  summary               String?
  version               Int           @default(1)
  status                PostStatus    @default(DRAFT)
  createdBy             String
  createdAt             DateTime      @default(now())
  contentFlag           ContentFlag[]
  currentRevisionPostId String?       @unique @db.Uuid
  currentRevisionPost   Posts?        @relation("Current Revision", fields: [currentRevisionPostId], references: [id])
}

model ContentFlag {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String     @db.Uuid
  post       Posts      @relation(fields: [postId], references: [id])
  revisionId String?    @db.Uuid
  revision   Revision?  @relation(fields: [revisionId], references: [id])
  signal     FlagSignal
  score      Float?
  severity   Severity
  source     FlagSource // MODEL for OpenAI, HUMAN for mod/ed, REPORT for reader
  details    Json?
  createdAt  DateTime   @default(now())
  resolvedAt DateTime?
  resolvedBy String?
}

model Report {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String       @db.Uuid
  post       Posts        @relation(fields: [postId], references: [id])
  reporterId String? // null if unauth
  reason     String
  evidence   String?
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  closedAt   DateTime?
  handledBy  String?
}

enum ReportStatus {
  OPEN
  CLOSED
  DISMISSED
}

enum PostStatus {
  DRAFT
  SUBMITTED
  PENDING_AUTO
  PENDING_HUMAN
  APPROVED
  REJECTED
  PUBLISHED
}

enum FlagSource {
  MODEL
  HUMAN
  REPORT
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FlagSignal {
  TOXICITY
  SLUR
  PII
  NSFW_IMAGE
  LINK_POLICY
  MALWARE_LINK
  OTHER
}

model UserSettings {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

model PostPictures {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String? @db.Uuid
  userId String  @db.Uuid
  post   Posts?  @relation(fields: [postId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  bucket   String
  key      String
  url      String
  region   String?
  etag     String?
  checksum String?

  mimeType  String
  sizeBytes Int?
  width     Int?
  height    Int?

  placeholder String
  alt         String?
  caption     String?
  indexInHtml Int?

  createdAt DateTime @default(now())

  @@unique([postId, placeholder])
  @@index([postId])
}


model ModerationJob {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId          String     @db.Uuid
  postVersion     Int
  idempotencyKey  String     @unique
  provider        String     @default("openai")
  providerModel   String
  requestHash     String 
  status          JobStatus  @default(QUEUED)
  result          Json?
  error           String?
  attempts        Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  post            Posts      @relation(fields: [postId], references: [id])
  @@index([postId, postVersion])
  @@unique([postId, postVersion])
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCESSFUL
  FAILED
}

model ReviewTask {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId      String    @db.Uuid
  postVersion Int
  assigneeId  String?
  reason      String
  status      TaskStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  post        Posts     @relation(fields: [postId], references: [id])
  
  @@unique([postId, postVersion])
  @@index([status, createdAt])
}

enum TaskStatus {
  OPEN
  CLAIMED
  RESOLVED
}

model Decision {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId      String    @db.Uuid
  postVersion Int
  decidedBy   String    // userId or 'system'
  outcome     DecisionOutcome
  rationale   String?
  data        Json?
  createdAt   DateTime  @default(now())

  post        Posts     @relation(fields: [postId], references: [id])
  
  @@index([postId, postVersion])
}

enum DecisionOutcome {
  APPROVE
  REJECT
  ESCALATE
}


model AuthorTrustMetric {
  id              String    @id @default(cuid())
  userId          String    @unique @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  rejectedCount   Int       @default(0) // from moderator rejections
  reportedCount   Int       @default(0) // accepted reports on user's posts
  humanFlagCount  Int       @default(0) // flags sourced = HUMAN
  score           Float     @default(0) // computed metric
  isAdminTrusted  Boolean   @default(false) // admin toggle
  lastEvaluatedAt DateTime?
  updatedAt       DateTime  @updatedAt
}

model AbuseCounter {
  id        String   @id @default(cuid())
  bucket    String   @unique // e.g., "report:ip:{hash}:2025-09-01"
  count     Int      @default(0)
  expiresAt DateTime // TTL index at DB or Redis alternative
}

enum UserRoles {
  User
  Creator
  Moderator
  Admin
}

model AuditLog {
  id        String   @id @default(cuid())
  subject   String   // e.g., "ModerationJob:xyz"
  action    String   // e.g., "ENQUEUED", "PROCESSED", "ESCALATED", "CLAIMED"
  actorId   String?  // null = system
  meta      Json?
  createdAt DateTime @default(now())
}
